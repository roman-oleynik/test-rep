// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SlideGroup /> should render a slide group of 1 slide 1`] = `
<div
  className="slide-group"
  data-testid="slide-group"
>
  <div
    style={
      Object {
        "gridArea": "1/1/3/5",
      }
    }
  >
    <div
      className="slide"
    >
      <div
        className="slide__children"
        style={
          Object {
            "fontSize": "2.5vw",
          }
        }
      >
        <div
          style={
            Object {
              "display": "flex",
              "flexDirection": "column",
              "height": "10em",
              "justifyContent": "center",
            }
          }
        >
          <h1
            style={
              Object {
                "fontSize": "1.5em",
              }
            }
          >
            Behavioral patterns
          </h1>
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`<SlideGroup /> should render a slide group of 2 slides 1`] = `
<div
  className="slide-group"
  data-testid="slide-group"
>
  <div
    style={
      Object {
        "gridArea": "1/1/3/3",
      }
    }
  >
    <div
      className="slide"
    >
      <div
        className="slide__children"
        style={
          Object {
            "fontSize": "1.25vw",
          }
        }
      >
        <div
          style={
            Object {
              "display": "flex",
              "flexDirection": "column",
              "height": "10em",
              "justifyContent": "center",
            }
          }
        >
          <h1
            style={
              Object {
                "fontSize": "1.5em",
              }
            }
          >
            Behavioral patterns
          </h1>
        </div>
      </div>
    </div>
  </div>
  <div
    style={
      Object {
        "gridArea": "1/3/3/5",
      }
    }
  >
    <div
      className="slide"
    >
      <div
        className="slide__children"
        style={
          Object {
            "fontSize": "1.25vw",
          }
        }
      >
        <div
          style={
            Object {
              "alignItems": "center",
              "display": "flex",
              "flexDirection": "column",
            }
          }
        >
          <h1
            style={
              Object {
                "fontSize": "1.2em",
              }
            }
          >
            Chain of Responsibility
          </h1>
          <p
            style={
              Object {
                "fontSize": "0.7em",
                "textAlign": "center",
              }
            }
          >
            Chain of Responsibility is a behavioral design pattern that lets you pass requests along a chain of handlers. Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the chain.
          </p>
          <img
            alt="Chain of responsibility"
            src="https://refactoring.guru/images/patterns/content/chain-of-responsibility/chain-of-responsibility.png"
            width="50%"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`<SlideGroup /> should render a slide group of 4 slides 1`] = `
<div
  className="slide-group"
  data-testid="slide-group"
>
  <div
    style={
      Object {
        "gridArea": "1/1/2/3",
      }
    }
  >
    <div
      className="slide"
    >
      <div
        className="slide__children"
        style={
          Object {
            "fontSize": "0.625vw",
          }
        }
      >
        <div
          style={
            Object {
              "display": "flex",
              "flexDirection": "column",
              "height": "10em",
              "justifyContent": "center",
            }
          }
        >
          <h1
            style={
              Object {
                "fontSize": "1.5em",
              }
            }
          >
            Behavioral patterns
          </h1>
        </div>
      </div>
    </div>
  </div>
  <div
    style={
      Object {
        "gridArea": "1/3/2/5",
      }
    }
  >
    <div
      className="slide"
    >
      <div
        className="slide__children"
        style={
          Object {
            "fontSize": "0.625vw",
          }
        }
      >
        <div
          style={
            Object {
              "alignItems": "center",
              "display": "flex",
              "flexDirection": "column",
            }
          }
        >
          <h1
            style={
              Object {
                "fontSize": "1.2em",
              }
            }
          >
            Chain of Responsibility
          </h1>
          <p
            style={
              Object {
                "fontSize": "0.7em",
                "textAlign": "center",
              }
            }
          >
            Chain of Responsibility is a behavioral design pattern that lets you pass requests along a chain of handlers. Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the chain.
          </p>
          <img
            alt="Chain of responsibility"
            src="https://refactoring.guru/images/patterns/content/chain-of-responsibility/chain-of-responsibility.png"
            width="50%"
          />
        </div>
      </div>
    </div>
  </div>
  <div
    style={
      Object {
        "gridArea": "2/1/3/3",
      }
    }
  >
    <div
      className="slide"
    >
      <div
        className="slide__children"
        style={
          Object {
            "fontSize": "0.625vw",
          }
        }
      >
        <div
          style={
            Object {
              "alignItems": "center",
              "display": "flex",
              "flexDirection": "column",
            }
          }
        >
          <h1
            style={
              Object {
                "fontSize": "1.2em",
              }
            }
          >
            Command
          </h1>
          <p
            style={
              Object {
                "fontSize": "0.7em",
                "textAlign": "center",
              }
            }
          >
            Command is a behavioral design pattern that turns a request into a stand-alone object that contains all information about the request. This transformation lets you parameterize methods with different requests, delay or queue a requestâ€™s execution, and support undoable operations.
          </p>
          <img
            alt="Chain of responsibility"
            src="https://refactoring.guru/images/patterns/content/command/command-en.png"
            width="50%"
          />
        </div>
      </div>
    </div>
  </div>
  <div
    style={
      Object {
        "gridArea": "2/3/3/5",
      }
    }
  >
    <div
      className="slide"
    >
      <div
        className="slide__children"
        style={
          Object {
            "fontSize": "0.625vw",
          }
        }
      >
        <div
          style={
            Object {
              "alignItems": "center",
              "display": "flex",
              "flexDirection": "column",
            }
          }
        >
          <h1
            style={
              Object {
                "fontSize": "1.2em",
              }
            }
          >
            Iterator
          </h1>
          <p
            style={
              Object {
                "fontSize": "0.7em",
                "textAlign": "center",
              }
            }
          >
            Iterator is a behavioral design pattern that lets you traverse elements of a collection without exposing its underlying representation (list, stack, tree, etc.).
          </p>
          <img
            alt="Chain of responsibility"
            src="https://refactoring.guru/images/patterns/content/iterator/iterator-en.png"
            width="50%"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;
